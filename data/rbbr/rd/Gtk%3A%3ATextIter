= class Gtk::TextIter
Gtk::TextIter represents iterators which most text manipulation is accomplished with.
An iterator represents a position between two characters in the text buffer. Iterators are not valid indefinitely; whenever the buffer is modified in a way that affects the number of characters in the buffer, all outstanding iterators become invalid. (Note that deleting 5 characters and then reinserting 5 still invalidates iterators, though you end up with the same number of characters you pass through a state with a different number).
Because of this, iterators can't be used to preserve positions across buffer modifications. To preserve a position, the Gtk::TextMark object is ideal.

== Object Hierarchy
* Object
  * GLib::Boxed
    * Gtk::TextIter

== Included Modules
* Comparable

== Instance Methods
--- <=> (rhs)
    Returns negative if self is less than rhs, positive if self is greater than rhs, and 0 if they're equal. Ordering is in character offset order, i.e. the first character in the buffer is less than the second character in the buffer.
    *rhs: a Gtk::TextIter
    * Returns: -1 if self is less than rhs, 1 if self is greater, 0 if they are equal

--- == (rhs)
    Tests whether two iterators are equal, using the fastest possible mechanism. This method is very fast; you can expect it to perform better than e.g. getting the character offset for each iterator and comparing the offsets yourself. Also, it's a bit faster than Gtk::TextIter#<=>.
    * rhs: a Gtk::TextIter
    * Returns: true if the iterators point to the same place in the buffer

--- buffer
    Returns the Gtk::TextBuffer this iterator is associated with.
    * Returns: the buffer

--- offset
    Returns the character offset of an iterator. Each character in a Gtk::TextBuffer has an offset, starting with 0 for the first character in the buffer. Use Gtk::TextBuffer::get_iter_at_offset to convert an offset back into an iterator.
    * Returns: a character offset
--- offset=(char_offset)
    Sets self to point to char_offset. char_offset counts from the start of the entire text buffer, starting with 0.
    * char_offset: a character number
    * Returns: char_offset
--- set_offset(char_offset)
    Same as offset=.
    * char_offset: a character number
    * Returns: self

--- line
    Returns the line number containing the iterator. Lines in a Gtk::TextBuffer are numbered beginning with 0 for the first line in the buffer.
    * Returns: a line number
--- line=(line_number)
    Moves iterator self to the start of the line line_number. If line_number is negative or larger than the number of lines in the buffer, moves iter to the start of the last line in the buffer.
    * line_number: line number (counted from 0)
    * Returns: line_number
--- set_line(line_number)
    Same as line=.
    * line_number: line number (counted from 0)
    * Returns: self

--- line_offset
    Returns the character offset of the iterator, counting from the start of a newline-terminated line. The first character on the line has offset 0.
    * Returns: offset from start of line
--- line_offset=(char_on_line)
    Moves self within a line, to a new character (not byte) offset. The given character offset must be less than or equal to the number of characters in the line; if equal, iter moves to the start of the next line. See Gtk::TextIter#set_line_index if you have a byte index rather than a character offset.
    * char_on_line: a character offset relative to the start of self's current line
    * Returns: char_on_line
--- set_line_offset(char_on_line)
    Same as line_offset=.
    * char_on_line: a character offset relative to the start of self's current line
    * Returns: self

--- line_index
    Returns the byte index of the iterator, counting from the start of a newline-terminated line. Remember that Gtk::TextBuffer encodes text in UTF-8, and that characters can require a variable number of bytes to represent.
    * Returns: distance from start of line, in bytes
--- line_index=(byte_on_line)
    Same as Gtk::TextIter#set_line_offset, but works with a byte index. The given byte index must be at the start of a character, it can't be in the middle of a UTF-8 encoded character.
    * byte_on_line: a byte index relative to the start of self's current line
    * Returns: byte_on_line
--- set_line_index(byte_on_line)
    Same as line_index=.
    * byte_on_line: a byte index relative to the start of self's current line
    * Returns: self

--- visible_line_index
    Returns the number of bytes from the start of the line to the given self, not counting bytes that are invisible due to tags with the "invisible" flag toggled on.
    * Returns: byte index of self with respect to the start of the line
--- visible_line_index=(byte_on_line)
    Like Gtk::TextIter#set_line_index, but the index is in visible bytes, i.e. text with a tag making it invisible is not counted in the index.
    * byte_on_line: a byte index 
    * Returns: byte_on_line
--- set_visible_line_index(byte_on_line)
    Same as visible_line_index=.
    * byte_on_line: a byte index 
    * Returns: self

--- visible_line_offset
    Returns the offset in characters from the start of the line to the given self, not counting characters that are invisible due to tags with the "invisible" flag toggled on.
    * Returns: offset in visible characters from the start of the line 
--- visible_line_offset=(char_on_line)
    Like Gtk::TextIter#set_line_offset, but the offset is in visible characters, i.e. text with a tag making it invisible is not counted in the offset.
    * char_on_line: a character offset
    * Returns: char_on_line
--- set_visible_line_offset(char_on_line)
    Same as visible_line_offset=.
    * char_on_line: a character offset
    * Returns: self

--- char
    Returns the Unicode character at this iterator. If the element at this iterator is a non-character element, such as an image embedded in the buffer, the Unicode "unknown" character 0xFFFC is returned. If invoked on the end iterator, zero is returned; zero is not a valid Unicode character. So you can write a loop which ends when Gtk::TextIter#char returns 0.
    * Returns: a Unicode character, or 0 if iter is not dereferenceable

--- get_slice(end)
    Returns the text in the given range(from self to end). A "slice" is an array of characters encoded in UTF-8 format, including the Unicode "unknown" character 0xFFFC for iterable non-character elements in the buffer, such as images. Because images are encoded in the slice, byte and character offsets in the returned array will correspond to byte offsets in the text buffer. Note that 0xFFFC can occur in normal text as well, so it is not a reliable indicator that a pixbuf or widget is in the buffer.
    * end: Gtk::TextIter at end of a range
    * Returns: slice of text from the buffer

--- get_text(end)
    Returns text in the given range(from self to end). If the range contains non-text elements such as images, the character and byte offsets in the returned string will not correspond to character and byte offsets in the buffer. If you want offsets to correspond, see Gtk::TextIter#get_slice.
    * end: Gtk::TextIter at end of a range
    * Returns: strings from the buffer

--- get_visible_slice(end)
    Like Gtk::TextIter#get_slice, but invisible text is not included. Invisible text is usually invisible because a Gtk::TextTag with the "invisible" attribute turned on has been applied to it.
    * end: Gtk::TextIter at end of a range
    * Returns: slice of text from the buffer

--- get_visible_text(end)
    Like Gtk::TextIter#get_text, but invisible text is not included. Invisible text is usually invisible because a Gtk::TextTag with the "invisible" attribute turned on has been applied to it.
    * end: Gtk::TextIter at end of range 
    * Returns: string containing visible text in the range

--- pixbuf
    If the element at self is a pixbuf, the pixbuf is returned. Otherwise, nil is returned.
    * Returns: the Gdk::Pixbuf at self

--- marks
    Returns an array of all Gtk::TextMark at self. Because marks are not iterable (they don't take up any "space" in the buffer, they are just marks in between iterable locations), multiple marks can exist in the same place. The returned array is not in any meaningful order.
    Returns: An array of GtkTextMark

--- toggled_tags(toggled_on)
    Returns an array of Gtk::TextTag that are toggled on or off at self. (If toggled_on is true, the array contains tags that are toggled on.) If a tag is toggled on at iter, then some non-empty range of characters following self has that tag applied to it. If a tag is toggled off, then some non-empty range following self does not have the tag applied to it.
    * toggled_on: true to get toggled-on tags
    * Returns: An array of Gtk::TextTag toggled at this point

--- child_anchor
    If the location at self contains a child anchor, the anchor is returned. Otherwise, nil is returned.
    *Returns: Gtk::TextChildAnchor at self

--- begins_tag?(tag)
    Returns true if tag is toggled on at exactly this point. If tag is nil, returns true if any tag is toggled on at this point. Note that the Gtk::TextIter#begins_tag? returns true if iter is the start of the tagged range; Gtk::TextIter#has_tag? tells you whether an iterator is within a tagged range.
    * tag: a Gtk::TextTag or nil
    * Returns: true or false

--- ends_tag?(tag)
    Returns true if tag is toggled off at exactly this point. If tag is nil, returns true if any tag is toggled off at this point. Note that the Gtk::TextIter#ends_tag? returns true if self is the end of the tagged range; Gtk::TextIter#has_tag? tells you whether an iterator is within a tagged range.
    * tag: a Gtk::TextTag or nil
    * Returns: true or false

--- toggles_tag?(tag)
    This is equivalent to (Gtk::TextIter#begins_tag? || Gtk::TextIter#ends_tag?), i.e. it tells you whether a range with tag applied to it begins or ends at self.
    * tag: a Gtk::TextTag or nil
    * Returns: true or false

--- has_tag?(tag)
    Returns true if self is within a range tagged with tag
    * tag: a Gtk::TextTag
    * Returns: true or false

--- tags
    Returns an array of tags that apply to self, in ascending order of priority (highest-priority tags are last).
    * Returns: an array of Gtk::TextTag

--- editable?(default_setting)
    Returns whether the character at self is within an editable region of text. Non-editable text is "locked" and can't be changed by the user via Gtk::TextView. This method is simply a convenience wrapper around Gtk::TextIter#attributes. If no tags applied to this text affect editability, default_setting will be returned.
    You don't want to use this method to decide whether text can be inserted at self, because for insertion you don't want to know whether the char at self is inside an editable range, you want to know whether a new character inserted at self would be inside an editable range. Use Gtk::TextIter#can_insert? to handle this case.
    * default_setting: true if text is editable by default
    * Returns: true or false

--- can_insert?(default_editability)
    Considering the default editability of the buffer, and tags that affect editability, determines whether text inserted at self would be editable. If text inserted at self would be editable then the user should be allowed to insert text at self. Gtk::TextBuffer#insert_interactive uses this function to decide whether insertions are allowed at a given position.
    * default_editability: true if text is editable by default
    * Returns: whether text inserted at self would be editable

--- starts_word?
    Determines whether self begins a natural-language word. Word breaks are determined by Pango and should be correct for nearly any language (if not, the correct fix would be to the Pango word break algorithms).
    * Returns: true if self is at the start of a word
--- ends_word?
    Determines whether self ends a natural-language word. Word breaks are determined by Pango and should be correct for nearly any language (if not, the correct fix would be to the Pango word break algorithms).
    * Returns: true if self is at the end of a word

--- inside_word?
    Determines whether self is inside a natural-language word (as opposed to say inside some whitespace). Word breaks are determined by Pango and should be correct for nearly any language (if not, the correct fix would be to the Pango word break algorithms).
    * Returns: true if self is inside a word 

--- starts_line?
    Returns true if self begins a paragraph, i.e. if Gtk::TextIter#line_offset would return 0. However this method is potentially more efficient than Gtk::TextIter#line_offset because it doesn't have to compute the offset, it just has to see whether it's 0.
    * Returns: whether self begins a line
--- ends_line?
    Returns true if iter points to the start of the paragraph delimiter characters for a line (delimiters will be either a newline, a carriage return, a carriage return followed by a newline, or a Unicode paragraph separator character). Note that an iterator pointing to the \n of a \r\n pair will not be counted as the end of a line, the line ends before the \r. The end iterator is considered to be at the end of a line, even though there are no paragraph delimiter chars there.
    * Returns: whether self is at the end of a line 

--- starts_sentence?
    Determines whether self begins a sentence. Sentence boundaries are determined by Pango and should be correct for nearly any language (if not, the correct fix would be to the Pango text boundary algorithms).
    * Returns: true if self is at the start of a sentence.
--- ends_sentence?
    Determines whether self ends a sentence. Sentence boundaries are determined by Pango and should be correct for nearly any language (if not, the correct fix would be to the Pango text boundary algorithms).
    * Returns : true if self is at the end of a sentence.

--- inside_sentence?
    Determines whether self is inside a sentence (as opposed to in between two sentences, e.g. after a period and before the first letter of the next sentence). Sentence boundaries are determined by Pango and should be correct for nearly any language (if not, the correct fix would be to the Pango text boundary algorithms).
    * Returns: true if iter is inside a sentence.

--- cursor_position?
    See Gtk::TextIter#forward_cursor_position or PangoLogAttr or pango_break for details on what a cursor position is.
    * Returns: true if the cursor can be placed at self

--- chars_in_line
    Returns the number of characters in the line containing self, including the paragraph delimiters.
    * Returns: number of characters in the line

--- bytes_in_line
    Returns the number of bytes in the line containing self, including the paragraph delimiters.
    * Returns : number of bytes in the line

--- attributes
    Computes the effect of any tags applied to this spot in the text. If no tags are in effect, nil is returnd.
    * Returns : a Gtk::TextAttributes or nil

--- language
    A convenience wrapper around Gtk::TextIter#attributes, which returns the language in effect at self. If no tags affecting language apply to iter, the return value is identical to that of Gtk::default_language.
    * Returns: language in effect at self

--- end?
    Returns true if self is the end iterator, i.e. one past the last dereferenceable iterator in the buffer. Gtk::TextIter#end? is the most efficient way to check whether an iterator is the end iterator.
    * Returns : whether self is the end iterator
--- start?
    Returns true if self is the first iterator in the buffer, that is if iter has a character offset of 0.
    * Returns : whether self is the first in the buffer

--- forward_char
    Moves iter forward by one character offset. Note that images embedded in the buffer occupy 1 character slot, so Gtk::TextIter#forward_char may actually move onto an image instead of a character, if you have images in your buffer. If self is the end iterator or one character before it, iter will now point at the end iterator, and Gtk::TextIter#forward_char returns false for convenience when writing loops.
    * Returns: whether iter moved and is dereferenceable
--- backward_char
    Moves backward by one character offset. Returns true if movement was possible; if iter was the first in the buffer (character offset 0), Gtk::TextIter#backward_char returns false for convenience when writing loops.
    * Returns: whether movement was possible

--- forward_chars(count)
    Moves count characters if possible (if count would move past the start or end of the buffer, moves to the start or end of the buffer). The return value indicates whether the new position of iter is different from its original position, and dereferenceable (the last iterator in the buffer is not dereferenceable). If count is 0, the function does nothing and returns false.
    * count: number of characters to move, may be negative
    * Returns: whether self moved and is dereferenceable
--- backward_chars(count)
    Moves count characters backward, if possible (if count would move past the start or end of the buffer, moves to the start or end of the buffer). The return value indicates whether the iterator moved onto a dereferenceable position; if the iterator didn't move, or moved onto the end iterator, then false is returned. If count is 0, the method does nothing and returns false.
    * count: number of characters to move
    * Returns: whether self moved and is dereferenceable

--- forward_line
    Moves self to the start of the next line. Returns true if there was a next line to move to, and false if self was simply moved to the end of the buffer and is now not dereferenceable, or if iter was already at the end of the buffer.
    * Returns: whether self can be dereferenced
--- backward_line
    Moves self to the start of the previous line. Returns true if self could be moved; i.e. if self was at character offset 0, this function returns false. Therefore if self was already on line 0, but not at the start of the line, iter is snapped to the start of the line and the method returns true. (Note that this implies that in a loop calling this method, the line number may not change on every iteration, if your first iteration is on line 0.)
    * Returns: whether iter moved

--- forward_lines(count)
    Moves count lines forward, if possible (if count would move past the start or end of the buffer, moves to the start or end of the buffer). The return value indicates whether the iterator moved onto a dereferenceable position; if the iterator didn't move, or moved onto the end iterator, then false is returned. If count is 0, the method does nothing and returns false. If count is negative, moves backward by 0 - count lines.
    * count: number of lines to move forward
    * Returns: whether self moved and is dereferenceable 
--- backward_lines(count)
    Moves count lines backward, if possible (if count would move past the start or end of the buffer, moves to the start or end of the buffer). The return value indicates whether the iterator moved onto a dereferenceable position; if the iterator didn't move, or moved onto the end iterator, then false is returned. If count is 0, the method does nothing and returns false. If count is negative, moves forward by 0 - count lines.
    * count: number of lines to move backward
    * Returns: whether self moved and is dereferenceable

--- forward_word_ends(count)
    Calls Gtk::TextIter#forward_word_end up to count times.
    * count: number of times to move 
    * Returns: true if self moved and is not the end iterator
--- backward_word_starts(count)
    Calls Gtk::TextIter#word_start up to count times.
    * count: number of times to move
    * Returns: true if self moved and is not the end iterator 

--- forward_word_end
    Moves forward to the next word end. (If self is currently on a word end, moves forward to the next one after that.) Word breaks are determined by Pango and should be correct for nearly any language (if not, the correct fix would be to the Pango word break algorithms).
    *Returns: true if self moved and is not the end iterator
--- backward_word_start
    Moves backward to the previous word start. (If self is currently on a word start, moves backward to the next one after that.) Word breaks are determined by ((<Pango|Ruby/Pango>)) and should be correct for nearly any language (if not, the correct fix would be to the Pango word break algorithms).
    * Returns: true if self moved and is not the end iterator 

--- forward_cursor_position
    Moves self forward by a single cursor position. Cursor positions are (unsurprisingly) positions where the cursor can appear. Perhaps surprisingly, there may not be a cursor position between all characters. The most common example for European languages would be a carriage return/newline sequence. For some Unicode characters, the equivalent of say the letter "a" with an accent mark will be represented as two characters, first the letter then a "combining mark" that causes the accent to be rendered; so the cursor can't go between those two characters. See also the PangoLogAttr structure and pango_break method.
    * Returns : true if we moved and the new position is dereferenceable
--- backward_cursor_position
    Like Gtk::TextIter#forward_cursor_position, but moves backward.
    * Returns: true if we moved

--- forward_cursor_positions(count)
    Moves up to count cursor positions. See Gtk::TextIter#forward_cursor_position for details.
    * count: number of positions to move
    * Returns: true if we moved and the new position is dereferenceable
--- backward_cursor_positions(count)
    Moves up to count cursor positions. See Gtk::TextIter#forward_cursor_position for details.
    * count: number of positions to move
    * Returns: true if we moved and the new position is dereferenceable 

--- forward_sentence_end
    Moves forward to the next sentence end. (If self is at the end of a sentence, moves to the next end of sentence.) Sentence boundaries are determined by Pango and should be correct for nearly any language (if not, the correct fix would be to the Pango text boundary algorithms).
    * Returns: true if self moved and is not the end iterator
--- backward_sentence_start
    Moves backward to the previous sentence start; if self is already at the start of a sentence, moves backward to the next one. Sentence boundaries are determined by Pango and should be correct for nearly any language (if not, the correct fix would be to the Pango text boundary algorithms).
    * Returns: true if self moved and is not the end iterator

--- forward_sentence_ends(count)
    Calls Gtk::TextIter#forward_sentence_end count times (or until Gtk::TextIter#forward_sentence_end returns false). If count is negative, moves backward instead of forward.
    * count: number of sentences to move
    * Returns: true if self moved and is not the end iterator
--- backward_sentence_starts(count)
    Calls Gtk::TextIter#backward_sentence_start up to count times, or until it returns false. If count is negative, moves forward instead of backward.
    * count: number of sentences to move
    * Returns: true if self moved and is not the end iterator

--- forward_to_end
    Moves self forward to the "end iterator," which points one past the last valid character in the buffer. Gtk::TextIter#char called on the end iterator returns 0, which is convenient for writing loops.
    * Returns: self

--- forward_to_line_end
    Moves the iterator to point to the paragraph delimiter characters, which will be either a newline, a carriage return, a carriage return/newline in sequence, or the Unicode paragraph separator character. If the iterator is already at the paragraph delimiter characters, moves to the paragraph delimiter characters for the next line. If iter is on the last line in the buffer, which does not end in paragraph delimiters, moves to the end iterator (end of the last line), and returns false.
    * Returns: true if we moved and the new location is not the end iterator

--- forward_to_tag_toggle(tag)
    Moves forward to the next toggle (on or off) of the Gtk::TextTag tag, or to the next toggle of any tag if tag is nil. If no matching tag toggles are found, returns false, otherwise true. Does not return toggles located at self, only toggles after self. Sets self to the location of the toggle, or to the end of the buffer if no toggle is found.
    * tag: a Gtk::TextTag or nil
    * Returns: whether we found a tag toggle after self

--- forward_find_char(limit) { |ch| ... }
    Advances self, calling block on each character. If block returns true, returns true and stops scanning. If block never returns true, self is set to limit if limit is non-nil, otherwise to the end iterator.
    * limit: search limit, or nil for none
    * ch: UCS-4 character code
    * Returns: whether a match was found
--- backward_find_char(limit) { |ch| ... }
    Same as Gtk::TextIter#forward_find_char, but goes backward from iter.
    * limit: search limit, or nil for none
    * ch: UCS-4 character code
    * Returns: whether a match was found

--- forward_search(str, flags, limit)
    Searches forward for str. Any match is returned by an array of Gtk::TextIter [match_start, match_end]. match_start is setted to the first character of the match and match_end to the first character after the match. The search will not continue past limit. Note that a search is a linear or O(n) operation, so you may wish to use limit to avoid locking up your UI on large buffers.
    If the Gtk::TextIter::SEARCH_VISIBLE_ONLY flag is present, the match may have invisible text interspersed in str. i.e. str will be a possibly-noncontiguous subsequence of the matched range. similarly, if you specify Gtk::TextIter::SEARCH_TEXT_ONLY, the match may have pixbufs or child widgets mixed inside the matched range. If these flags are not given, the match must be exact; the special 0xFFFC character in str will match embedded pixbufs or child widgets.
    * str: a search string
    * flags: flags affecting how the search is done (((<GtkTextSearchFlags|Gtk::TextIter#GtkTextSearchFlags>)))
    * limit: bound for the search, or nil for the end of the buffer
    * Returns: an array of Gtk::TextIter or nil
--- backward_search(str, flags, limit)
    Same as Gtk::TextIter#forward_search, but moves backward.
    * str: search string
    * flags: bitmask of flags affecting the search (((<GtkTextSearchFlags|Gtk::TextIter#GtkTextSearchFlags>)))
    * limit: location of last possible match_start, or nil for start of buffer
    * Returns: an array of Gtk::TextIter or nil

--- backward_to_tag_toggle(tag)
    Moves backward to the next toggle (on or off) of the Gtk::TextTag tag, or to the next toggle of any tag if tag is nil. If no matching tag toggles are found, returns false, otherwise true. Does not return toggles located at self, only toggles before self. Sets self to the location of the toggle, or the start of the buffer if no toggle is found.
    * tag: a Gtk::TextTag or nil
    * Returns: whether we found a tag toggle before self

== Constants
=== GtkTextSearchFlags
--- SEARCH_TEXT_ONLY
--- SEARCH_VISIBLE_ONLY
--- SEARCH_CASE_INSENSITIVE
    ((*Ruby/GtkSouceView*)) 

=== GtkSourceSearchFlags
These constants are defined when ((*Ruby/GtkSouceView*)) is required. Both of SEARCH_TEXT_ONLY and SEARCH_VISIBLE_ONLY are same as constants of GtkTextSearchFlags.
--- SEARCH_TEXT_ONLY
--- SEARCH_VISIBLE_ONLY
--- SEARCH_CASE_INSENSITIVE


== ChangeLog
* 2003-08-07 ((<Masao>)): Revised.
* 2003-04-07 ((<Masao>)): Move from The RWiki. And some modified.
* 2002-12-22 ((<OGASAWARA>))
