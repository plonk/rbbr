= class Gtk::Range

== Object Hierarchy
* Object
  * GLib::Instantiatable
    * GLib::Object
      * Gtk::Object
        * Gtk::Widget
          * Gtk::Range

== Instance Methods
--- adjustment 
    Get the Gtk::Adjustment which is the "model" object for Gtk::Range. See Gtk::Range#adjustment= for details. The return value does not have a reference added, so should not be unreferenced.
    * Returns: the Gtk::Adjustment
--- adjustment=(adj)
    Sets the adjustment to be used as the "model" object for this range widget. The adjustment indicates the current range value, the minimum and maximum range values, the step/page increments used for keybindings and scrolling, and the page size. The page size is normally 0 for Gtk::Scale and nonzero for Gtk::Scrollbar, and indicates the size of the visible area of the widget being scrolled. The page size affects the size of the scrollbar slider.
    * adj: a Gtk::Adjustment 
    * Returns: adj
--- set_adjustment(adj)
    Same as adjustment=.
    * adj: a Gtk::Adjustment 
    * Returns: self

--- inverted?
    Gets the value set by Gtk::Range#inverted=.
    * Returns: true if the range is inverted 
--- inverted=(setting)
    Ranges normally move from lower to higher values as the slider moves from top to bottom or left to right. Inverted ranges have higher values at the top or on the right rather than on the bottom or left.
    * setting : true to invert the range 
    * Returns: setting
--- set_inverted(setting)
    Same as inverted=.
    * setting : true to invert the range 
    * Returns: self

--- update_policy
    Gets the update policy of range. See Gtk::Range#update_policy=.
    * Returns: the current update policy(((<GtkUpdateType|Gtk#GtkUpdateType>))).
--- update_policy=(policy)
    Sets the update policy for the range. Gtk::UPDATE_CONTINUOUS means that anytime the range slider is moved, the range value will change and the value_changed signal will be emitted. Gtk::UPDATE_DELAYED means that the value will be updated after a brief timeout where no slider motion occurs, so updates are spaced by a short time rather than continuous. Gtk::UPDATE_DISCONTINUOUS means that the value will only be updated when the user releases the button and ends the slider drag operation.
    * policy: update policy(((<GtkUpdateType|Gtk#GtkUpdateType>)))
    * Returns: policy
--- set_update_policy(policy)
    Same as update_policy=.
    * policy : update policy(((<GtkUpdateType|Gtk#GtkUpdateType>)))
    * Returns: self

--- value
    Gets the current value of the range.
    * Returns: current value of the range. 

--- value=(value)
    Sets the current value of the range; if the value is outside the minimum or maximum range values, it will be clamped to fit inside them. The range emits the "value_changed" signal if the value changes.
    * value: new value of the range
    * Returns: value
--- set_value(value)
    Same as value=.
    * value: new value of the range
    * Returns: self

--- set_increments(step, page)
    Sets the step and page sizes for the range. The step size is used when the user clicks the Gtk::Scrollbar arrows or moves Gtk::Scale via arrow keys. The page size is used for example when moving via Page Up or Page Down keys.
    * step: step size(Float)
    * page: page size(Float)

--- set_range(min, max)
    Sets the allowable values in the Gtk::Range, and clamps the range value to be between min and max. (If the range has a non-zero page size, it is clamped between min and max - page-size.)
    * min: minimum range value(Float)
    * max: maximum range value(Float)

== Properties
--- adjustment: Gtk::Adjustment (Read/Write)
    The Gtk::Adjustment that contains the current value of this range object

--- inverted: true or false (Read/Write)
    Invert direction slider moves to increase range value

--- update-policy: Integer (Read/Write)
    How the range should be updated on the screen

== Signals
--- adjust-bounds: self, arg1
     * self: Gtk::Range
     * arg1: 

--- move-slider: self, scroll_type
    Virtual function that moves the slider. Used for keybindings.
     * self: Gtk::Range
     * scroll_type: ((<GtkScrollType|Gtk#GtkScrollType>))

--- value-changed: self
    Emitted when the range value changes.
     * self: Gtk::Range

- ((<Masao>))
