= class Gtk::BindingSet

== Object Hierarchy
* Object
  * GLib::Boxed
    * Gtk::BindingSet

== Class Methods
--- Gtk::BindingSet.find(set_name)
    Finds the Gtk::Gtk::BindingSet which name is the set_name.
    * set_name: target name of Gtk::BindingSet
    * Returns: self
--- Gtk::BindingSet.new(set_name)
    Creates a new Gtk::BindingSet.
    * set_name: the name of Gtk::BingindSet.
    * Returns: a new Gtk::BindingSet

== Instance Methods
--- activate(keyval, modifiers, object)
    Activate the Gtk::BindingSet.
    * keyval: a keyval from a key event(the constants are in Gdk::Keyval)
    * modifiers: keyboard state mask from a key event (((<GdkModifierType|Gdk::Window#GdkModifierType>))) 
    * object: the Gtk::Object
    * Returns: true if the binding_set was handled, false otherwise  

--- add_path(path_type, path_pattern, priority)
    Add a path to the Gtk::BindingSet.
    * path_type: a ((<GtkPathType|Gtk#GtkPathType>))
    * path_pattern: a path pattern(String)
    * priority: a ((<GtkPathPriorityType|Gtk#GtkPathPriorityType>))
    * Returns: self

--- add_signal(keyval, modifiers, signal_name, arg1, arg2, ...)
    Bind a key event to a signal with arguments.
    * keyval: a keyval from a key event(the constants are in Gdk::Keyval)
    * modifiers: keyboard state mask from a key event (((<GdkModifierType|Gdk::Window#GdkModifierType>))) 
    * signal_name: the signal name to bind.
    * arg1, arg2, ...: the argument values are sended to the signal. The values are String, Numeric, GLib::Enum, GLib::Flags, true or false.
    * Returns: self

--- entry_clear(keyval, modifiers)
    Clear an entry.
    * keyval: a keyval from a key event(the constants are in Gdk::Keyval)
    * modifiers: keyboard state mask from a key event (((<GdkModifierType|Gdk::Window#GdkModifierType>))) 
    * Returns: self


- ((<Masao>))
