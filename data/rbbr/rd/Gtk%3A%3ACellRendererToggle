= class Gtk::CellRendererToggle
The Gtk::CellRendererToggle is used for rendering a cell to a Gdk::Drawable with toggle buttons. 

== Object Hierarchy
* Object
  * GLib::Instantiatable
    * GLib::Object
      * Gtk::Object
        * Gtk::CellRenderer
          * Gtk::CellRendererToggle

== Class Methods
--- Gtk::CellRendererToggle.new
    Creates a new Gtk::CellRendererToggle. Adjust rendering parameters using object properties. Object properties can be set globally (with GLib::Object.set_property. Also, with Gtk::TreeViewColumn, you can bind a property to a value in a Gtk::TreeModel. For example, you can bind the "active" property on the cell renderer to a boolean value in the model, thus causing the check button to reflect the state of the model.
* Returns : the new cell renderer  

== Instance Methods
--- activatable?
    Returns the value whether the toggle button can be activated or not.
    Returns: true if the button can be activated.

--- activatable=(actvatable)
    Sets the value whether the toggle button can be activated or not.
    * activatable: true if the button can be activated.
    * Returns: activatable
--- set_activatable(activatable)
    Same as activatable=.
    * activatable: true if the button can be activated.
    * Returns: self

--- active?
    Returns the toggle state of the button.
    * Returns: true if the toggle state is active.
--- active=(active)
    Sets the toggle state of the button.
    * active: true if the toggle state is active.  
    * Returns: active
--- set_active(active)
    Same as active=.
    * active: true if the toggle state is active.
    * Returns: self
   
--- radio?
    Returns the value whether the toggle button is drawn as radio button or as toggle button.
--- radio=(radio)
    Sets the value whether the toggle button is drawn as radio button or as toggle button.
    * radio: true if the toggle button is drawn as radio button.
    * Returns: radio
--- set_radio(radio)
    Same as radio=.
    * radio: true if the toggle button is drawn as radio button.
    * Returns: self

== Properties
--- activatable: true or false (Read/Write)
    The toggle button can be activated

--- active: true or false (Read/Write)
    The toggle state of the button

--- inconsistent: true or false (Read/Write)
    The inconsistent state of the button

--- radio: true or false (Read/Write)
    Draw the toggle button as a radio button

== Signals
--- toggled: self, arg1
     * self: the object which received the signal.
     * arg1: String value(?).

- ((<Masao>))
