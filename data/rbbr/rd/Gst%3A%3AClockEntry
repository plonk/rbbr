= class Gst::ClockEntry
A wrapper for GstClockID, used to create and start timers
on Gst::Clock objects.

== Object Hierarchy
* Object
  * GLib::Boxed
    * Gst::ClockEntry

== Class Methods
--- Gst::ClockEntry.new(clock, time, interval=nil)
    Creates a new Gst::ClockEntry object based on the given Gst::Clock.
    Two types of Gst::ClockEntry objects can be created:
    * One-shot: if the interval is ommited or nil, the entry will trigger a single shot notification, at the requested time (in nanoseconds);
    * Periodic: if the interval is not nil, the timer entry will trigger a periodic notification, starting at time (in nanoseconds), and be fired with the given interval (also in nanoseconds).
    The timer will be issued after Gst::ClockEntry#wait or
    Gst::ClockEntry#wait_async.
    * time: a time period, in nanoseconds. 
    * clock: a Gst::Clock. 
    * interval: an interval period, in nanoseconds.  
    * Returns: a new Gst::ClockEntry object.

== Instance Methods
--- clock
    This method returns the owner clock of the entry, as a Gst::Clock object.
    * Returns: the owner clock of the entry, as a Gst::Clock object.

--- interval
    This method returns the interval of the entry (in nanoseconds), or 0  if the entry is not periodic.
    * Returns: the interval of the entry (in nanoseconds), or 0  if the entry is not periodic.

--- periodic?
    This method returns true if the entry is periodic, false otherwise.
    * Returns: true if the entry is periodic, false otherwise.

--- single_shot?
    This method returns true if the entry is single-shot, false otherwise.
    * Returns: true if the entry is single-shot, false otherwise.

--- status
    This method returns the status of the entry (see Gst::ClockEntry::Status).
    * Returns: the status of the entry (see Gst::ClockEntry::Status).

--- time
    This method returns the requested time of the entry, in nanoseconds.
    * Returns: the requested time of the entry, in nanoseconds.

--- unlock
    Unlocks the entry.
    * Returns: self.

--- unschedule
    Cancels an outstanding async notification request.
    * Returns: self.

--- wait
    Performs a blocking wait on the entry.
    * Returns: a return code (see ((<GstClockReturn|Gst::Clock#GstClockReturn>))).

--- wait_async { |clock, time, clock_entry| ... }
    Registers a block code, which will be called passing references
    to the Gst::Clock, the time (in nanoseconds) and the Gst::ClockEntry as
    parameters.
    * Returns: a return code (see ((<GstClockReturn|Gst::Clock#GstClockReturn>))).

== See Also
((<Gst>)).

- ((<lrz>))
