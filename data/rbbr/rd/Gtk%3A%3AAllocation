= Gtk::Allocation
== Object Hierarchy
* Object
  * GLib::Boxed
    * Gtk::Allocation

== Class Methods
--- Gtk::Allocation.new(x, y, width, height)
    Creates a new Gtk::Allocation    
    * x: x value(Integer)
    * y: y value(Integer)
    * width: width value(Integer)
    * height: height value(Integer)
    * Returns: a new Gtk::Allocation

== Instance Methods
--- &(other)
    Gets a new Gtk::Allocation that is intersection of the two regions. 
    * Returns: a new Gtk::Allocation or nil
--- intersect(other)
    Same as &
    * Returns: a new Gtk::Allocation or nil

--- |(other)
    Gets a new Gtk::Allocation that combines all of this region and the second region. 
    * Returns: a new Gtk::Allocation or nil
--- union(other)
    Same as |.
    * Returns: a new Gtk::Allocation or nil

--- height
    Gets the height value.
    * Returns: height
--- height=(height)
    Sets the height value.
    * height: a new height value(Integer)
    * Returns: height
--- set_height(height)
    Same as height=.
    * height: a new height value(Integer)
    * Returns: self

--- width
    Gets the width value.
    * Returns: width
--- width=(width)
    Sets the width value.
    * width: a new width value(Integer)
    * Returns: width
--- set_width(width)
    Same as width=.
    * width: a new width value(Integer)
    * Returns: self

--- x
    Gets the x value.
    * Returns: x
--- x=(x)
    Sets the x value.
    * x: a new x value(Integer)
    * Returns: x
--- set_x(x)
    Same as x=.
    * x: a new x value(Integer)
    * Returns: self

--- y
    Gets the y value.
    * Returns: y
--- y=(y)
    Sets the y value.
    * y: a new y value(Integer)
    * Returns: y
--- set_y(y)
    Same as y=.
    * y: a new y value(Integer)
    * Returns: self

--- to_a
    Gets the values as an Array.
    * Returns: [x, y, width, height]
      * x: x value(Integer)
      * y: y value(Integer)
      * width: width value(Integer)
      * height: height value(Integer)

== See Also

- ((<Masao>))